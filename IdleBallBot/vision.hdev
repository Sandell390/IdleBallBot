<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="13.0.4">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>global def tuple mode</l>
<c></c>
<l>global def tuple moneyString</l>
<c></c>
<l>global def tuple levelString</l>
<c></c>
<l>global def tuple vector(2) balls</l>
<c></c>
<l>global def tuple vector(1) ballsUpgradeCoords</l>
<c></c>
<l>global def tuple foundDiamond</l>
<c></c>
<l>global def tuple isBallMenuOpen</l>
<c></c>
<l>global def tuple PrestigeTicks</l>
<c></c>
<c></c>
<l>PrestigeTicks := ''</l>
<l>moneyString := ''</l>
<l>levelString := ''</l>
<l>foundDiamond := ['']</l>
<l>isBallMenuOpen := false</l>
<c></c>
<c></c>
<l>balls.clear()</l>
<l>ballsUpgradeCoords.clear()</l>
<c></c>
<l>*mode := 7</l>
<l>read_image (Image, 'screen.png')</l>
<l>if (mode == 1) // Money</l>
<l>    image_to_channels (Image, Images)</l>
<l>    select_obj (Images, ObjectSelected, 3)</l>
<c>    **clip_region (Image, RegionClipped, 0, 0, 256, 256)</c>
<l>    gen_rectangle1 (Rectangle, 100, 0, 230, 345)</l>
<c>    </c>
<l>    reduce_domain (ObjectSelected, Rectangle, moneyImage)</l>
<l>    TextFinder (moneyImage, 7, 30, 30, moneyString1)</l>
<c></c>
<l>    moneyString := ''</l>
<l>    if (moneyString1 != [])</l>
<l>        moneyString := moneyString1</l>
<l>    endif</l>
<c>    </c>
<l>endif</l>
<c></c>
<l>if (mode == 2) // Level</l>
<l>    image_to_channels (Image, Images)</l>
<l>    select_obj (Images, ObjectSelected, 3)</l>
<c>    **clip_region (Image, RegionClipped, 0, 0, 256, 256)</c>
<l>    gen_rectangle1 (Rectangle, 120, 355, 200, 730)</l>
<c>    </c>
<l>    reduce_domain (ObjectSelected, Rectangle, ImageReduced)</l>
<l>    TextFinder (ImageReduced, -1, 20, 30, levelString)</l>
<l>endif</l>
<c></c>
<l>if (mode == 3) // Diamond</l>
<c>    </c>
<l>    image_to_channels (Image, Images2)</l>
<l>    select_obj (Images2, ObjectSelected1, 3)</l>
<c>    </c>
<l>    gen_rectangle1 (Rectangle1, 350, 25, 1500, 1070)</l>
<l>    reduce_domain (ObjectSelected1, Rectangle1, ImageReduced2)</l>
<c>    **clear_ncc_model (ModelID)</c>
<l>    read_ncc_model ('DiamondModel', ModelID)</l>
<l>    find_ncc_model (ImageReduced2, ModelID, -0.1, 0.2, 0.8, 1, 0.5, 'true', 0, Row1, Column1, Angle, Score)</l>
<c>    </c>
<c>    **read_shape_model ('DiamondModel', ModelID)</c>
<c>    **find_shape_model (ImageReduced2,ModelID , 0, 0, 0.8, 1, 0.5, 'none', 4, 0.9, Row1, Column1, Angle, Score)</c>
<c>    </c>
<l>    foundDiamond := [Row1,Column1]</l>
<c>    </c>
<l>    clear_ncc_model (ModelID)</l>
<c>    </c>
<c>    **gen_rectangle1 (Rectangle2, Row1 - 40, Column1 - 40, Row1 + 40, Column1 + 40)</c>
<c>    </c>
<l>    *draw_rectangle1 (200000, Row1, Column1, Row2, Column2)</l>
<l>    *gen_rectangle1 (Rectangle2, Row1, Column1, Row2, Column2)</l>
<l>    *reduce_domain (ObjectSelected1, Rectangle2, ImageReduced3)</l>
<l>    *dev_clear_window ()</l>
<l>    *dev_display (ImageReduced3)</l>
<l>    *create_ncc_model (ImageReduced3, 'auto', -0.1, 0.2, 0.02, 'use_polarity', ModelID)</l>
<l>    *write_ncc_model (ModelID, 'DiamondModel')</l>
<l>    *create_shape_model (ImageReduced3, 'auto', -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID)</l>
<l>    *write_shape_model (ModelID, 'DiamondModel')</l>
<c>    </c>
<c>    </c>
<l>endif</l>
<c></c>
<l>if (mode == 4) // Balls</l>
<l>    gen_rectangle1 (Rectangle, 1695, 10, 2295, 1065)</l>
<l>    reduce_domain (Image, Rectangle, ImageReduced)</l>
<l>    image_to_channels (ImageReduced, Images1)</l>
<c>    </c>
<l>    select_obj (Images1, imageRed, 1)</l>
<l>    select_obj (Images1, imageGreen, 2)</l>
<l>    select_obj (Images1, imageBlue, 3)</l>
<c>    </c>
<l>    threshold (imageBlue, Region, 150, 255)</l>
<l>    closing_rectangle1 (Region, RegionClosing, 1000, 10)</l>
<c>    </c>
<c>    </c>
<c>    **fill_up (Region, RegionFillUp)</c>
<l>    connection (RegionClosing, ConnectedRegions)</l>
<c>    **draw_rectangle1 (200000, Row1, Column1, Row2, Column2)</c>
<c>    **gen_rectangle1 (Rectangle1, Row1, Column1, Row2, Column2)</c>
<c>    **draw_region (Region1, 200000)</c>
<c>    **area_center (ConnectedRegions, Area1, Row3, Column3)</c>
<c>    </c>
<l>    string := []</l>
<c>    </c>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 230000 - 60000, 230000 + 40000)</l>
<l>    area_center (SelectedRegions, Area, Row, Column)</l>
<l>    count_obj (SelectedRegions, Number1)</l>
<l>    for Index1 := 1 to Number1 by 1</l>
<c>            ** Check if the box is unlock new ball</c>
<l>            select_obj (SelectedRegions, Box, Index1)</l>
<l>            reduce_domain (imageBlue, Box, ImageReduced1)</l>
<l>            TextFinder (ImageReduced1, 7, 20, 37, output)</l>
<c>            </c>
<l>            if(output[0] == 'Unl0ckNeVVBall')</l>
<l>                string := ['unlock',string]</l>
<l>                balls.insert(balls.length(),{'l0ck'})</l>
<c>                </c>
<l>            else</l>
<l>                string := ['ball',string]</l>
<c>                </c>
<l>                reduce_domain (imageGreen, Box, ImageReduced1)</l>
<c>                </c>
<l>                gen_rectangle1 (AmountPart, Row[Index1- 1] + 20, Column[Index1-1] - 190, Row[Index1-1]  + 110, Column[Index1-1] + 40)</l>
<l>                reduce_domain (ImageReduced1, AmountPart, AmountImage)</l>
<l>                TextFinder (AmountImage, 6, 20, 37, AmountString)</l>
<c>                </c>
<l>                gen_rectangle1 (AmountPart, Row[Index1- 1] - 60, Column[Index1-1] - 180, Row[Index1-1]  + 60, Column[Index1-1])</l>
<l>                reduce_domain (ImageReduced1, AmountPart, AmountImage)</l>
<l>                TextFinder (AmountImage, -1, 25, 37, AmountString2)</l>
<c>                </c>
<l>                AmountString := [AmountString2,AmountString]</l>
<c>               </c>
<l>                gen_rectangle1 (SpeedPart, Row[Index1- 1] - 60, Column[Index1-1] + 50, Row[Index1-1]  + 110, Column[Index1-1] + 270)</l>
<l>                reduce_domain (ImageReduced1, SpeedPart, SpeedImage)</l>
<l>                TextFinder (SpeedImage,7, 20, 30, SpeedString)</l>
<c>                </c>
<l>                gen_rectangle1 (PowerPart, Row[Index1- 1] - 60, Column[Index1-1] + 290, Row[Index1-1]  + 110, Column[Index1-1] + 500)</l>
<l>                reduce_domain (ImageReduced1, PowerPart, PowerImage)</l>
<l>                TextFinder (PowerImage,7, 20, 40, PowerString)</l>
<c>                </c>
<l>                gen_rectangle1 (BallNamePart, Row[Index1- 1] - 120, Column[Index1-1] - 200, Row[Index1-1]  - 70, Column[Index1-1] + 250)</l>
<l>                reduce_domain (ImageReduced1, BallNamePart, BallNameImage)</l>
<l>                TextFinder (BallNameImage, 7, 20, 37, BallNameString1)</l>
<c>                </c>
<l>                BallNameString := ['']</l>
<l>                if (BallNameString1 != [])</l>
<l>                    BallNameString := BallNameString1</l>
<l>                endif</l>
<c>                </c>
<l>                area_center (AmountImage, AmountArea, AmountRow, AmountColumn)</l>
<c>                </c>
<c>                </c>
<c>                </c>
<c>                </c>
<l>                area_center (SpeedImage, SpeedArea, SpeedRow, SpeedColumn)</l>
<l>                area_center (PowerImage, PowerArea, PowerRow, PowerColumn)</l>
<c>                </c>
<l>                CoordsTuple := [AmountRow,AmountColumn, SpeedRow, SpeedColumn, PowerRow, PowerColumn]</l>
<c>                </c>
<l>                balls.insert(balls.length(),{AmountString,SpeedString,PowerString,BallNameString})</l>
<l>                ballsUpgradeCoords.insert(ballsUpgradeCoords.length(),CoordsTuple)</l>
<c>                </c>
<c>                </c>
<l>            endif</l>
<l>    endfor </l>
<l>endif</l>
<c>    </c>
<l>if (mode == 5) // Balls Menu</l>
<l>    image_to_channels (Image, Images2)</l>
<l>    select_obj (Images2, ObjectSelected1, 3)</l>
<c>    </c>
<l>    gen_rectangle1 (Rectangle1, 1540, 5, 1625, 270)</l>
<l>    reduce_domain (ObjectSelected1, Rectangle1, ImageReduced3)</l>
<c>    </c>
<l>    TextFinder (ImageReduced3, 11, 40, 37, BallMenuString)</l>
<c>    </c>
<l>    if (BallMenuString == 'BALLS')</l>
<l>        isBallMenuOpen := true</l>
<l>    endif</l>
<c>    </c>
<l>endif</l>
<c></c>
<l>if(mode == 6)</l>
<l>    image_to_channels (Image, Images3)</l>
<l>    select_obj (Images3, ObjectSelected2, 3)</l>
<c>    </c>
<l>    *draw_rectangle1 (200000, Row11, Column11, Row2, Column2)</l>
<l>    gen_rectangle1 (Rectangle2, 1415, 611, 1539, 800)</l>
<l>    reduce_domain (ObjectSelected2, Rectangle2, ImageReduced4)</l>
<c>    </c>
<l>    TextFinder (ImageReduced4,4, 18, 35, output)</l>
<c>    </c>
<c></c>
<l>    for Index := 1 to 30 by 1</l>
<c>        </c>
<l>        for Index2 := 1 to 70 by 1</l>
<c>            </c>
<l>            for Index3 := 1 to 70 by 1</l>
<c>                </c>
<l>                TextFinder (ImageReduced4,Index, Index2, Index3, output)</l>
<c>                </c>
<l>                if(output != [])</l>
<c>                    </c>
<l>                    if(output[0] == 5)</l>
<l>                        stop()</l>
<l>                    endif</l>
<c>                     </c>
<l>                    stop()</l>
<l>                endif</l>
<c>                </c>
<l>            endfor</l>
<l>        endfor</l>
<c>        </c>
<l>    endfor</l>
<l>    stop ()</l>
<l>    PrestigeTicks := output</l>
<c>    </c>
<l>endif</l>
<c></c>
<l>if (mode == 7) // Full Screen Diamond Find</l>
<l>    image_to_channels (Image, Images2)</l>
<l>    select_obj (Images2, ObjectSelected1, 3)</l>
<c>    </c>
<l>    gen_rectangle1 (Rectangle1, 350, 25, 2280, 1070)</l>
<l>    reduce_domain (ObjectSelected1, Rectangle1, ImageReduced2)</l>
<c>    **clear_ncc_model (ModelID)</c>
<l>    read_ncc_model ('DiamondModel', ModelID)</l>
<l>    find_ncc_model (ImageReduced2, ModelID, -0.1, 0.2, 0.8, 1, 0.5, 'true', 0, Row1, Column1, Angle, Score)</l>
<c>    </c>
<c>    **read_shape_model ('DiamondModel', ModelID)</c>
<c>    **find_shape_model (ImageReduced2,ModelID , 0, 0, 0.8, 1, 0.5, 'none', 4, 0.9, Row1, Column1, Angle, Score)</c>
<c>    </c>
<l>    foundDiamond := [Row1,Column1]</l>
<c>    </c>
<l>    clear_ncc_model (ModelID)</l>
<l>endif</l>
<c></c>
<l>dev_clear_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="TextFinder">
<interface>
<io>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="strok_width" base_type="ctrl" dimension="0"/>
<par name="width" base_type="ctrl" dimension="0"/>
<par name="height" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="output" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>output := []</l>
<l>string := ''</l>
<c></c>
<l>invert_image (Region, ImageInvert)</l>
<l>read_ocr_class_mlp ('gen_font/ocr.omc', OCRHandle)</l>
<c></c>
<l>if (strok_width == -1)</l>
<l>    create_text_model_reader ('auto', OCRHandle, TextModel)</l>
<l>else</l>
<l>    create_text_model_reader ('manual', OCRHandle, TextModel)</l>
<c>* </c>
<l>    set_text_model_param (TextModel, 'char_width', width)</l>
<l>    set_text_model_param (TextModel, 'char_height', height)</l>
<l>    set_text_model_param (TextModel, 'stroke_width', strok_width)</l>
<l>    set_text_model_param (TextModel, 'polarity', 'dark_on_light')</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>find_text (ImageInvert, TextModel, TextResult)</l>
<c>        </c>
<l>get_text_result (TextResult, 'num_lines', NumLines)</l>
<c></c>
<l>for LineIndex := 0 to NumLines - 1 by 1</l>
<l>    string := ''</l>
<l>    get_text_object (Line, TextResult, ['line', LineIndex])</l>
<l>    do_ocr_multi_class_mlp (Line, ImageInvert, OCRHandle, Class, Confidence)</l>
<c>    * </c>
<c>    * Display results </c>
<l>    count_obj (Line, NumberOfCharacters)</l>
<l>    smallest_rectangle1 (Line, Row1, Column1, Row2, Column2)</l>
<l>    dev_set_colored (6)</l>
<l>    dev_display (Line)</l>
<l>    dev_set_color ('dark green')</l>
<l>    for CharacterIndex := 1 to NumberOfCharacters by 1</l>
<l>        select_obj (Line, Character, CharacterIndex)</l>
<l>        if(Class[CharacterIndex - 1] == 'o' or Class[CharacterIndex - 1] == 'O')</l>
<l>            Class[CharacterIndex - 1] := '0'</l>
<l>        endif</l>
<c>        </c>
<l>        if(Class[CharacterIndex - 1] == '5' and CharacterIndex == 1)</l>
<l>            Class[CharacterIndex - 1] := '$'</l>
<l>        endif</l>
<c>        </c>
<l>        if(Class[CharacterIndex - 1] == 'x' or Class[CharacterIndex - 1] == 'X')</l>
<l>            continue</l>
<l>        endif</l>
<c>        </c>
<l>        string := string + Class[CharacterIndex - 1]</l>
<l>     endfor</l>
<l>     output := [output,string]</l>
<l>endfor</l>
<c></c>
<l>clear_text_model (TextModel)</l>
<l>clear_text_result (TextResult)</l>
<l>clear_ocr_class_mlp (OCRHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="TextFinder">
<parameters>
<parameter id="Region"/>
<parameter id="height"/>
<parameter id="output"/>
<parameter id="strok_width"/>
<parameter id="width"/>
</parameters>
</docu>
</procedure>
</hdevelop>
